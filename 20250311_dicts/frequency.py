# Частотность символов (показывает преподаватель):
# у вас есть строка.
# Сколько раз в ней встречается каждый символ?

my_str = '''# Частотность символов (показывает преподаватель):
# у вас есть строка.
# Сколько раз в ней встречается каждый символ?'''

kav = '"'
kav = "'"
kav = '\'"'
kav = ''' " '
 '''

result = {}
for letter in my_str:
    if letter in result:
        # если буковка уже была, добавляем единичку
        result[letter] += 1
    else:
        result[letter] = 1
        # если буковки не было, заводим "карточку буквки"
print(result)

# Дополнить задачу. Указать в том числе 0 для букв, котрых
# нет в тексте. Достаточно только маленьких букв

#alph = 'абвгдеёжзиклмнопрстуфхцчшщъыьэюя'
alph = []
for i in range(32):
    # у каждой буквы есть номер. Чтобы не выписывать весь алфавит руками...
    alph.append(chr(ord('а') + i))
print(alph)

for a in alph:
    if not (a in result):
        result[a] = 0 

# 2. Вывести частотности символов в алфавитном порядке
# (показывает преподаватель)

my_keys = list(result.keys())
for letter in sorted(my_keys):
    print(letter, result[letter])



'''
'#' 1
' ' 1
'Ч' 1
'а' 1
'с' 1
'т' 1+1
'о' 1+1
'н' 1

ость символов (показывает преподаватель):
# у вас есть строка.
# Сколько раз в ней встречается каждый символ?'
'
'''


winner = {
    10: ['а', 'о'],
    15: [' '],
}
winner = {}
# result = {'#': 3, ' ': 15, 'a': 10, 'o': 10.......}
# Вывести символы по убыванию частотности (показывает преподаватель)

# Сформируем желаемый словарь списков букв с ключами-частотами
for symb in result:
    # '#'
    how_many = result[symb]
    if how_many in winner:
        winner[how_many].append(symb)
    else:
        winner[how_many] = [symb]
print(winner)